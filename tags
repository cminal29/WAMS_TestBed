!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BACKLOG	src/ipdc/connections.h	39;"	d
BACKLOG	src/ipmu/connection.h	30;"	d
B_copy	src/ipmu/function.c	/^void B_copy(unsigned char main[], unsigned char tmp[], int ind, int n)$/;"	f
CFGSYNC	src/ipdc/global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v
CMDCFGSEND	src/ipdc/global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v
CMDDATAOFF	src/ipdc/global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v
CMDDATASEND	src/ipdc/global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v
CMDSYNC	src/ipdc/global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v
COUNT	globals.py	/^COUNT = {NoOfMachines:-1,NoOfPMUs:0,NoOfPMUsOnOneMachine:100}$/;"	v
CSV_DEST_HEADER	globals.py	/^CSV_DEST_HEADER = ['DEST DEIVICE FIELDS','DEVICE IP_ADDRESS','PROTOCOL']$/;"	v
CSV_HEADER	globals.py	/^CSV_HEADER = ['iPDC SETUP FIELDS','iPDC ID (integer)','TCP Port (1500-65535)','UDP Port (1500-65535)','iDB Server IP','SOURCE_DEVICES_COUNT',	'DESTINATION_DEVICE_COUNT','WAIT TIME (can be used in future)']$/;"	v
CSV_SOURCE_HEADER	globals.py	/^CSV_SOURCE_HEADER=['SOURCE DEVICE FIELDS','DEVICE ID','DEVICE IP','Port  (1500-65535)','PORT TYPE']$/;"	v
ConfigurationFrame	src/ipmu/iPMU.h	/^struct ConfigurationFrame $/;"	s
DATAINPUT	globals.py	/^DATAINPUT = "DATAINPUT"$/;"	v
DATARATE	globals.py	/^DATARATE="DATARATE"$/;"	v
DATASYNC	src/ipdc/global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v
DATA_thread	src/ipmu/connection.h	/^pthread_t UDP_thread,TCP_thread,DATA_thread;$/;"	v
DBPORT	src/ipdc/connections.h	38;"	d
DB_Server_addr	src/ipdc/global.h	/^struct sockaddr_in DB_Server_addr; \/\/ DB Address Information$/;"	v	typeref:struct:sockaddr_in
DB_addr_len	src/ipdc/global.h	/^int DB_sockfd,DB_addr_len;$/;"	v
DB_sockfd	src/ipdc/global.h	/^int DB_sockfd,DB_addr_len;$/;"	v
DESTINATION_DETAILS	globals.py	/^DESTINATION_DETAILS = "DESTINATION_DETAILS"$/;"	v
DEST_ID	globals.py	/^DEST_ID = "DEST_ID"$/;"	v
FILENAME	globals.py	/^FILENAME = "FILENAME"$/;"	v
H2S	src/ipmu/function.c	/^void H2S(char a[], unsigned char temp_6[])$/;"	f
IDCODE	globals.py	/^IDCODE = "IDCODE"$/;"	v
IP	globals.py	/^IP="IP"$/;"	v
IPToIDMapList	globals.py	/^IPToIDMapList = {}$/;"	v
LLfirst	src/ipdc/connections.h	/^}*LLfirst,*LLlast;$/;"	v	typeref:struct:Lower_Layer_Details
LLlast	src/ipdc/connections.h	/^}*LLfirst,*LLlast;$/;"	v	typeref:struct:Lower_Layer_Details
LOCAL_PDC_CSV_PATH	globals.py	/^LOCAL_PDC_CSV_PATH = 'data\/ipdc\/'$/;"	v
LOCAL_PMU_CSV_PATH	globals.py	/^LOCAL_PMU_CSV_PATH = 'data\/ipmu\/'$/;"	v
Lower_Layer_Details	src/ipdc/connections.h	/^struct Lower_Layer_Details {$/;"	s
MAXBUFLEN	src/ipdc/global.h	35;"	d
MAXTSB	src/ipdc/align_sort.h	30;"	d
MAX_STRING_SIZE	src/ipdc/global.h	34;"	d
MAX_STRING_SIZE	src/ipmu/iPMU.h	30;"	d
NAME	globals.py	/^NAME="NAME"$/;"	v
NoOfMachines	globals.py	/^NoOfMachines = 'NoOfMachines'$/;"	v
NoOfPMUs	globals.py	/^NoOfPMUs = 'NoOfPMUs'$/;"	v
NoOfPMUsOnOneMachine	globals.py	/^NoOfPMUsOnOneMachine = 'NoOfPMUsOnOneMachine'$/;"	v
ODFT	src/ipdc/align_sort.h	/^}ODFT[OLDFRAMECOUNT];$/;"	v	typeref:struct:oldDataFramesTimeStampList
OLDFRAMECOUNT	src/ipdc/align_sort.h	31;"	d
PASSWD	globals.py	/^PASSWD="PASSWD"$/;"	v
PDC_DETAILS	globals.py	/^PDC_DETAILS = {PDC_SETUP:[],SOURCE_DETAILS:[],DESTINATION_DETAILS:[]}$/;"	v
PDC_IDCODE	src/ipdc/global.h	/^int PDC_IDCODE,TCPPORT,UDPPORT;$/;"	v
PDC_SETUP	globals.py	/^PDC_SETUP="PDC_SETUP"$/;"	v
PMUData	src/ipdc/connections.h	/^struct PMUData{$/;"	s
PMU_addr	src/ipdc/connections.h	/^	struct sockaddr_in PMU_addr;$/;"	m	struct:PMUData	typeref:struct:PMUData::sockaddr_in
PMU_process_TCP	src/ipdc/connections.c	/^void PMU_process_TCP(unsigned char tcp_buffer[],int sockfd) {$/;"	f
PMU_process_UDP	src/ipdc/connections.c	/^void* PMU_process_UDP(void *pmu_data) {$/;"	f
PROTOCOL	globals.py	/^PROTOCOL = "PROTOCOL"$/;"	v
Pj	src/ipdc/applications.h	/^float Pj = 30;$/;"	v
REMOTE_PDC_PATH	globals.py	/^REMOTE_PDC_PATH = 'WAMS\/iPDC\/'$/;"	v
REMOTE_PMU_PATH	globals.py	/^REMOTE_PMU_PATH = 'WAMS\/iPMU\/'$/;"	v
SEND_DATA	src/ipmu/connection.c	/^void* SEND_DATA()$/;"	f
SOURCE_DETAILS	globals.py	/^SOURCE_DETAILS = "SOURCE_DETAILS"$/;"	v
SRC_ID	globals.py	/^SRC_ID = "SRC_ID"$/;"	v
TB	src/ipmu/iPMU.h	31;"	d
TCPPORT	globals.py	/^TCPPORT = "TCPPORT"$/;"	v
TCPPORT	src/ipdc/global.h	/^int PDC_IDCODE,TCPPORT,UDPPORT;$/;"	v
TCP_PMU	src/ipmu/connection.c	/^void* TCP_PMU()$/;"	f
TCP_addr	src/ipmu/connection.h	/^struct sockaddr_in UDP_addr,TCP_addr; \/* connector’s address information *\/$/;"	v	typeref:struct:
TCP_my_addr	src/ipdc/global.h	/^struct sockaddr_in UDP_my_addr,TCP_my_addr; \/* my address information *\/$/;"	v	typeref:struct:
TCP_my_addr	src/ipmu/connection.h	/^struct sockaddr_in UDP_my_addr,TCP_my_addr; \/* my address information *\/$/;"	v	typeref:struct:
TCP_sin_size	src/ipmu/connection.h	/^int UDP_addr_len,TCP_sin_size, numbytes;$/;"	v
TCP_sockfd	src/ipmu/connection.h	/^int UDP_sockfd,TCP_sockfd; \/* socket descriptors *\/$/;"	v
TCP_thread	src/ipdc/global.h	/^pthread_t UDP_thread,TCP_thread,p_thread;$/;"	v
TCP_thread	src/ipmu/connection.h	/^pthread_t UDP_thread,TCP_thread,DATA_thread;$/;"	v
TSB	src/ipdc/align_sort.h	/^}TSB[MAXTSB];$/;"	v	typeref:struct:TimeStampBuffer
TYPE	globals.py	/^TYPE = "TYPE"$/;"	v
TimeStampBuffer	src/ipdc/align_sort.h	/^struct TimeStampBuffer {$/;"	s
Tsb_Count	src/ipdc/align_sort.h	/^int Tsb_Count = 0;$/;"	v
UDPPORT	globals.py	/^UDPPORT = "UDPPORT"$/;"	v
UDPPORT	src/ipdc/global.h	/^int PDC_IDCODE,TCPPORT,UDPPORT;$/;"	v
UDP_PMU	src/ipmu/connection.c	/^void* UDP_PMU()$/;"	f
UDP_addr	src/ipmu/connection.h	/^struct sockaddr_in UDP_addr,TCP_addr; \/* connector’s address information *\/$/;"	v	typeref:struct:sockaddr_in
UDP_addr_len	src/ipmu/connection.h	/^int UDP_addr_len,TCP_sin_size, numbytes;$/;"	v
UDP_my_addr	src/ipdc/global.h	/^struct sockaddr_in UDP_my_addr,TCP_my_addr; \/* my address information *\/$/;"	v	typeref:struct:sockaddr_in
UDP_my_addr	src/ipmu/connection.h	/^struct sockaddr_in UDP_my_addr,TCP_my_addr; \/* my address information *\/$/;"	v	typeref:struct:sockaddr_in
UDP_sockfd	src/ipmu/connection.h	/^int UDP_sockfd,TCP_sockfd; \/* socket descriptors *\/$/;"	v
UDP_thread	src/ipdc/global.h	/^pthread_t UDP_thread,TCP_thread,p_thread;$/;"	v
UDP_thread	src/ipmu/connection.h	/^pthread_t UDP_thread,TCP_thread,DATA_thread;$/;"	v
UL_TCP_addr	src/ipdc/global.h	/^struct sockaddr_in UL_UDP_addr,UL_TCP_addr; \/* connector’s address information *\/$/;"	v	typeref:struct:
UL_TCP_sin_size	src/ipdc/connections.h	/^int UL_UDP_addr_len,UL_TCP_sin_size, numbytes;$/;"	v
UL_TCP_sockfd	src/ipdc/global.h	/^int UL_UDP_sockfd,UL_TCP_sockfd; \/* socket descriptors *\/$/;"	v
UL_UDP_addr	src/ipdc/global.h	/^struct sockaddr_in UL_UDP_addr,UL_TCP_addr; \/* connector’s address information *\/$/;"	v	typeref:struct:sockaddr_in
UL_UDP_addr_len	src/ipdc/connections.h	/^int UL_UDP_addr_len,UL_TCP_sin_size, numbytes;$/;"	v
UL_UDP_sockfd	src/ipdc/global.h	/^int UL_UDP_sockfd,UL_TCP_sockfd; \/* socket descriptors *\/$/;"	v
UL_data_transmission_off	src/ipdc/connections.h	/^	int UL_data_transmission_off;$/;"	m	struct:Upper_Layer_Details
UL_tcp	src/ipdc/connections.c	/^void* UL_tcp() {$/;"	f
UL_tcp_command	src/ipdc/connections.h	/^unsigned char UL_tcp_command[19];$/;"	v
UL_tcp_connection	src/ipdc/connections.c	/^void* UL_tcp_connection(void * temp_pdc) {$/;"	f
UL_udp	src/ipdc/connections.c	/^void* UL_udp(){$/;"	f
UL_udp_command	src/ipdc/connections.h	/^unsigned char UL_udp_command[19];$/;"	v
UL_upper_pdc_cfgsent	src/ipdc/connections.h	/^	int UL_upper_pdc_cfgsent;$/;"	m	struct:Upper_Layer_Details
ULfirst	src/ipdc/connections.h	/^}*ULfirst,*ULlast;$/;"	v	typeref:struct:Upper_Layer_Details
ULlast	src/ipdc/connections.h	/^}*ULfirst,*ULlast;$/;"	v	typeref:struct:Upper_Layer_Details
Upper_Layer_Details	src/ipdc/connections.h	/^struct Upper_Layer_Details {$/;"	s
add_PDC	src/ipdc/new_pmu_or_pdc.c	/^int add_PDC(char ip[], char protocol[]) {$/;"	f
add_PMU	src/ipdc/new_pmu_or_pdc.c	/^int add_PMU(char pmuid[], char ip[], char port[], char protocol[]) {$/;"	f
add_PMU_Node	src/ipdc/new_pmu_or_pdc.c	/^void add_PMU_Node(struct Lower_Layer_Details *temp_pmu) {$/;"	f
add_id_to_status_change_list	src/ipdc/parser.c	/^void add_id_to_status_change_list(unsigned char idcode[]) { $/;"	f
address_set	src/ipdc/connections.h	/^	int address_set;$/;"	m	struct:Upper_Layer_Details
adjustOldFrameCount	src/ipdc/align_sort.c	/^void adjustOldFrameCount(int index) {$/;"	f
analog	src/ipdc/parser.h	/^	unsigned char **analog;	$/;"	m	struct:data_for_each_pmu
analog	src/ipdc/parser.h	/^	unsigned char analog;$/;"	m	struct:format
angleInstability	src/ipdc/applications.c	/^int angleInstability(int i) {$/;"	f
angnames	src/ipdc/parser.h	/^	unsigned char **angnames;$/;"	m	struct:channel_names
annmr	src/ipdc/parser.h	/^	int annmr;$/;"	m	struct:data_for_each_pmu
annmr	src/ipdc/parser.h	/^	unsigned char *annmr;$/;"	m	struct:for_each_pmu
anunit	src/ipdc/parser.h	/^	unsigned char **anunit;$/;"	m	struct:for_each_pmu
assign_df_to_TSB	src/ipdc/align_sort.c	/^void assign_df_to_TSB(struct data_frame *df,int index) { $/;"	f
auto_create_cfg	src/ipmu/iPMU.c	/^void auto_create_cfg(int pmuID,int Frequency)$/;"	f
averageFrequency	src/ipdc/applications.c	/^float averageFrequency(int i) {$/;"	f
byte_by_byte_copy	src/ipdc/parser.c	/^void byte_by_byte_copy(unsigned char dst[],unsigned char src[],int index,int n) {$/;"	f
c2f_ieee	src/ipmu/function.c	/^float c2f_ieee(const void *v) $/;"	f
c2i	src/ipmu/function.c	/^int c2i (unsigned char temp[])$/;"	f
c2li	src/ipmu/function.c	/^long int c2li (unsigned char temp_3[])$/;"	f
c2li_3byte	src/ipmu/function.c	/^long int c2li_3byte (unsigned char temp3[])$/;"	f
c_copy	src/ipmu/function.c	/^void c_copy(unsigned char dst[], unsigned char src[], int ind, int n)$/;"	f
ceil	functions.py	/^from math import ceil$/;"	i
cfg2_frm	src/ipmu/iPMU.h	/^unsigned char cfg2_frm[MAX_STRING_SIZE];$/;"	v
cfg2_frm_size	src/ipmu/iPMU.h	/^int data_frm_size, cfg2_frm_size;$/;"	v
cfg_STNname	src/ipmu/iPMU.h	/^	char *cfg_STNname; $/;"	m	struct:ConfigurationFrame
cfg_af	src/ipmu/iPMU.h	/^	int  cfg_af; $/;"	m	struct:ConfigurationFrame
cfg_analog_anunit	src/ipmu/iPMU.h	/^	unsigned char *cfg_analog_anunit; $/;"	m	struct:ConfigurationFrame
cfg_analog_channels	src/ipmu/iPMU.h	/^	char *cfg_analog_channels; $/;"	m	struct:ConfigurationFrame
cfg_annmr_val	src/ipmu/iPMU.h	/^	int  cfg_annmr_val; $/;"	m	struct:ConfigurationFrame
cfg_cnt	src/ipdc/parser.h	/^	unsigned char *cfg_cnt;$/;"	m	struct:for_each_pmu
cfg_dataRate	src/ipmu/iPMU.h	/^	int  cfg_dataRate; $/;"	m	struct:ConfigurationFrame
cfg_dgnmr_val	src/ipmu/iPMU.h	/^	int  cfg_dgnmr_val; $/;"	m	struct:ConfigurationFrame
cfg_digital_channels	src/ipmu/iPMU.h	/^	char *cfg_digital_channels; $/;"	m	struct:ConfigurationFrame
cfg_fdf	src/ipmu/iPMU.h	/^	int  cfg_fdf; $/;"	m	struct:ConfigurationFrame
cfg_fnom	src/ipmu/iPMU.h	/^	int  cfg_fnom; $/;"	m	struct:ConfigurationFrame
cfg_frame	src/ipdc/parser.h	/^struct  cfg_frame {$/;"	s
cfg_info	src/ipmu/iPMU.h	/^}*cfg_info;$/;"	v	typeref:struct:ConfigurationFrame
cfg_pf	src/ipmu/iPMU.h	/^	int  cfg_pf; $/;"	m	struct:ConfigurationFrame
cfg_phasor_channels	src/ipmu/iPMU.h	/^	char *cfg_phasor_channels; $/;"	m	struct:ConfigurationFrame
cfg_phasor_phunit	src/ipmu/iPMU.h	/^	unsigned char *cfg_phasor_phunit; $/;"	m	struct:ConfigurationFrame
cfg_phnmr_val	src/ipmu/iPMU.h	/^	int  cfg_phnmr_val; $/;"	m	struct:ConfigurationFrame
cfg_pmuID	src/ipmu/iPMU.h	/^	int  cfg_pmuID; $/;"	m	struct:ConfigurationFrame
cfg_pn	src/ipmu/iPMU.h	/^	int  cfg_pn; $/;"	m	struct:ConfigurationFrame
cfgfirst	src/ipdc/parser.h	/^}*cfgfirst;$/;"	v	typeref:struct:cfg_frame
cfgframe	src/ipdc/global.h	/^unsigned char *cfgframe,*dataframe;$/;"	v
cfgnext	src/ipdc/parser.h	/^	struct  cfg_frame *cfgnext;$/;"	m	struct:cfg_frame	typeref:struct:cfg_frame::cfg_frame
cfgparser	src/ipdc/parser.c	/^void cfgparser(unsigned char st[]){ $/;"	f
channel_name	src/ipmu/function.c	62;"	d	file:
channel_names	src/ipdc/parser.h	/^struct channel_names {$/;"	s
checkAvaialbleMachines	functions.py	/^def checkAvaialbleMachines():$/;"	f
checkAvaialbleMachines	main.py	/^from functions import topologyRead,ipRead,checkAvaialbleMachines,displayTopology,displayPDCs$/;"	i
check_statword	src/ipdc/parser.c	/^int check_statword(unsigned char stat[]) { $/;"	f
checkip	src/ipdc/new_pmu_or_pdc.c	/^int checkip(char ip[]) {$/;"	f
chk	src/ipmu/iPMU.h	/^uint16_t chk;	\/\/ For checksum calculation$/;"	v
clear_TSB	src/ipdc/align_sort.c	/^void clear_TSB(int index) { \/\/ $/;"	f
cnext	src/ipdc/parser.h	/^	struct channel_names *cnext;$/;"	m	struct:for_each_pmu	typeref:struct:for_each_pmu::channel_names
compute_CRC	src/ipdc/parser.c	/^uint16_t compute_CRC(unsigned char *message,int length) {$/;"	f
compute_CRC	src/ipmu/function.c	/^uint16_t compute_CRC(unsigned char *message,int length)$/;"	f
config_change	src/ipdc/connections.h	/^	int config_change;$/;"	m	struct:Upper_Layer_Details
config_request	src/ipdc/new_pmu_or_pdc.c	/^void* config_request(void* temp) {$/;"	f
configuration_request	src/ipdc/new_pmu_or_pdc.c	/^int configuration_request(char pmuid[], char protocol[]) {$/;"	f
connect_pmu_tcp	src/ipdc/new_pmu_or_pdc.c	/^void* connect_pmu_tcp(void *temp) {$/;"	f
connect_pmu_udp	src/ipdc/new_pmu_or_pdc.c	/^void* connect_pmu_udp(void *temp) {$/;"	f
copyFileToRemoteMachine	deployPDC.py	/^from functions import createSSHConnection,createDirWithPermissions,copyFileToRemoteMachine$/;"	i
copyFileToRemoteMachine	deployPMU.py	/^from functions import createSSHConnection,createDirWithPermissions,copyFileToRemoteMachine$/;"	i
copyFileToRemoteMachine	functions.py	/^def copyFileToRemoteMachine(ssh_client,local_file_path,remote_file_path):$/;"	f
copy_cbyc	src/ipdc/parser.c	/^void copy_cbyc(unsigned char dst[],unsigned char s[],int size) {$/;"	f
count	src/ipdc/align_sort.h	/^	int count; \/\/ Current index$/;"	m	struct:TimeStampBuffer
counter	src/ipdc/align_sort.h	/^	int counter; \/\/ Timer that will be initially set to 0$/;"	m	struct:TimeStampBuffer
createDirWithPermissions	deployPDC.py	/^from functions import createSSHConnection,createDirWithPermissions,copyFileToRemoteMachine$/;"	i
createDirWithPermissions	deployPMU.py	/^from functions import createSSHConnection,createDirWithPermissions,copyFileToRemoteMachine$/;"	i
createDirWithPermissions	functions.py	/^def createDirWithPermissions(ssh_client,s):$/;"	f
createPDCFileNames	deployPDC.py	/^def createPDCFileNames():$/;"	f
createSSHConnection	deployPDC.py	/^from functions import createSSHConnection,createDirWithPermissions,copyFileToRemoteMachine$/;"	i
createSSHConnection	deployPMU.py	/^from functions import createSSHConnection,createDirWithPermissions,copyFileToRemoteMachine$/;"	i
createSSHConnection	functions.py	/^def createSSHConnection(hostname,username,password):$/;"	f
create_cfgframe	src/ipdc/align_sort.c	/^int create_cfgframe() { $/;"	f
create_command_frame	src/ipdc/new_pmu_or_pdc.c	/^void create_command_frame(int type,int pmu_id,char cmdframe[]) {$/;"	f
create_dataframe	src/ipdc/align_sort.c	/^int create_dataframe(int index) {$/;"	f
csv	deployPDC.py	/^import csv$/;"	i
csv	functions.py	/^import csv$/;"	i
csv_create_cfg	src/ipmu/iPMU.c	/^int csv_create_cfg(int pmuID,char *filePath)$/;"	f
dLog	src/ipdc/global.h	/^char *dLog;$/;"	v
data	src/ipdc/connections.h	/^	unsigned char *data;$/;"	m	struct:PMUData
dataWriteInFile	src/ipdc/parser.c	/^void* dataWriteInFile() {$/;"	f
data_for_each_pmu	src/ipdc/parser.h	/^struct data_for_each_pmu {$/;"	s
data_format	src/ipdc/parser.h	/^	unsigned char *data_format;$/;"	m	struct:for_each_pmu
data_frame	src/ipdc/parser.h	/^struct data_frame {$/;"	s
data_frm	src/ipmu/iPMU.h	/^unsigned char data_frm[MAX_STRING_SIZE];$/;"	v
data_frm_size	src/ipmu/iPMU.h	/^int data_frm_size, cfg2_frm_size;$/;"	v
data_mode	src/ipmu/iPMU.h	/^int data_mode; \/\/ 0: auto, 1: csv$/;"	v
data_off_llnode	src/ipdc/new_pmu_or_pdc.c	/^void* data_off_llnode(void* temp) {$/;"	f
data_on_llnode	src/ipdc/new_pmu_or_pdc.c	/^void* data_on_llnode(void* temp) {$/;"	f
data_rate	src/ipdc/parser.h	/^	unsigned char *data_rate;$/;"	m	struct:cfg_frame
data_transmission_off	src/ipdc/connections.h	/^	int data_transmission_off;$/;"	m	struct:Lower_Layer_Details
dataframe	src/ipdc/global.h	/^unsigned char *cfgframe,*dataframe;$/;"	v
dataparser	src/ipdc/parser.c	/^int dataparser(unsigned char data[]) { $/;"	f
dbserver_ip	src/ipdc/global.h	/^char dbserver_ip[20];$/;"	v
decode_ieee_single	src/ipdc/parser.c	/^float decode_ieee_single(const void *v) {$/;"	f
delFThreshold	src/ipdc/applications.h	/^float delFThreshold = 0.3;$/;"	v
deployAllPMUs	deployPMU.py	/^def deployAllPMUs(ipIndex,pmuIndex):$/;"	f
deployAllPMUs	main.py	/^from deployPMU import deployAllPMUs$/;"	i
deployPDC	deployPDC.py	/^def deployPDC(ipIndex,pmuIndex):	$/;"	f
deployPDC	main.py	/^from deployPDC import deployPDC$/;"	i
deploySetOfPMUs	deployPMU.py	/^def deploySetOfPMUs(n,ipIndex,pmuIndex):$/;"	f
deployStatus	main.py	/^deployStatus = 0;$/;"	v
dfreq	src/ipdc/parser.h	/^	unsigned char *dfreq;$/;"	m	struct:data_for_each_pmu
dg_next	src/ipdc/parser.h	/^	struct dgnames *dg_next;$/;"	m	struct:dgnames	typeref:struct:dgnames::dgnames
dgn	src/ipdc/parser.h	/^	unsigned char **dgn; \/\/ Stores 16 digital names for each word$/;"	m	struct:dgnames
dgnames	src/ipdc/parser.h	/^struct dgnames {$/;"	s
dgnmr	src/ipdc/parser.h	/^	int dgnmr;$/;"	m	struct:data_for_each_pmu
dgnmr	src/ipdc/parser.h	/^	unsigned char *dgnmr;$/;"	m	struct:for_each_pmu
dgunit	src/ipdc/parser.h	/^	unsigned char **dgunit;$/;"	m	struct:for_each_pmu
digital	src/ipdc/parser.h	/^	unsigned char **digital;$/;"	m	struct:data_for_each_pmu
dispatch	src/ipdc/align_sort.c	/^void dispatch(int index) {$/;"	f
displayPDCs	functions.py	/^def displayPDCs():$/;"	f
displayPDCs	main.py	/^from functions import topologyRead,ipRead,checkAvaialbleMachines,displayTopology,displayPDCs$/;"	i
displayTopology	functions.py	/^def displayTopology():$/;"	f
displayTopology	main.py	/^from functions import topologyRead,ipRead,checkAvaialbleMachines,displayTopology,displayPDCs$/;"	i
display_CT	src/ipdc/new_pmu_or_pdc.c	/^void display_CT() {$/;"	f
display_buf	src/ipdc/connections.c	/^char display_buf[200];$/;"	v
dnext	src/ipdc/parser.h	/^	struct data_frame *dnext;$/;"	m	struct:data_frame	typeref:struct:data_frame::data_frame
dpmu	src/ipdc/parser.h	/^	struct data_for_each_pmu **dpmu;$/;"	m	struct:data_frame	typeref:struct:data_frame::data_for_each_pmu
f	src/ipdc/global.h	/^FILE *fp_log,*fp_updc,*f;$/;"	v
f2c	src/ipmu/function.c	/^void f2c (float f, unsigned char temp_1[])$/;"	f
fc	src/ipdc/applications.h	/^float fc = 0;$/;"	v
first	src/ipdc/parser.h	/^	struct dgnames *first;$/;"	m	struct:channel_names	typeref:struct:channel_names::dgnames
first_data_frame	src/ipdc/align_sort.h	/^	struct data_frame *first_data_frame;$/;"	m	struct:TimeStampBuffer	typeref:struct:TimeStampBuffer::data_frame
floor	deployPMU.py	/^from math import floor$/;"	i
fmt	src/ipdc/parser.h	/^	struct format *fmt;$/;"	m	struct:data_for_each_pmu	typeref:struct:data_for_each_pmu::format
fmt	src/ipdc/parser.h	/^	struct format *fmt;$/;"	m	struct:for_each_pmu	typeref:struct:for_each_pmu::format
fnom	src/ipdc/parser.h	/^	unsigned char *fnom;$/;"	m	struct:for_each_pmu
for_each_pmu	src/ipdc/parser.h	/^struct for_each_pmu{$/;"	s
format	src/ipdc/parser.h	/^struct format{$/;"	s
fp_csv	src/ipmu/iPMU.h	/^FILE *fp_csv;$/;"	v
fp_log	src/ipdc/global.h	/^FILE *fp_log,*fp_updc,*f;$/;"	v
fp_updc	src/ipdc/global.h	/^FILE *fp_log,*fp_updc,*f;$/;"	v
fracsec	src/ipdc/align_sort.h	/^	char *fracsec;$/;"	m	struct:TimeStampBuffer
fracsec	src/ipdc/align_sort.h	/^	unsigned int fracsec;$/;"	m	struct:oldDataFramesTimeStampList
fracsec	src/ipdc/parser.h	/^	unsigned char *fracsec;$/;"	m	struct:cfg_frame
fracsec	src/ipdc/parser.h	/^	unsigned char *fracsec;$/;"	m	struct:data_frame
fracsec	src/ipmu/iPMU.h	/^long int soc, fracsec, fsecNum;$/;"	v
framesize	src/ipdc/parser.h	/^	unsigned char *framesize;$/;"	m	struct:cfg_frame
framesize	src/ipdc/parser.h	/^	unsigned char *framesize;$/;"	m	struct:data_frame
free_2darray	src/ipdc/dallocate.c	/^void free_2darray(unsigned char** array, int n){ $/;"	f
free_cfgframe_object	src/ipdc/dallocate.c	/^void free_cfgframe_object(struct cfg_frame *cfg) { $/;"	f
free_dataframe_object	src/ipdc/dallocate.c	/^void free_dataframe_object(struct data_frame *df) { $/;"	f
freq	src/ipdc/parser.h	/^	unsigned char *freq;$/;"	m	struct:data_for_each_pmu
freq	src/ipdc/parser.h	/^	unsigned char freq;$/;"	m	struct:format
frequencyInstability	src/ipdc/applications.c	/^int frequencyInstability(int i) {$/;"	f
front	src/ipdc/align_sort.h	/^int front = -1;$/;"	v
fsecNum	src/ipmu/iPMU.h	/^long int soc, fracsec, fsecNum;$/;"	v
generate_data_frame	src/ipmu/iPMU.c	/^void generate_data_frame()$/;"	f
generate_dummy_dataframe	src/ipdc/align_sort.c	/^struct data_frame* generate_dummy_dataframe(unsigned char *idcode)$/;"	f
getPhasorAngle	src/ipdc/applications.c	/^float getPhasorAngle(int format,char left[],char right[],unsigned char *d,int polar,struct cfg_frame *temp_cfg,i,j) {$/;"	f
i2c	src/ipmu/function.c	/^void i2c (int t, unsigned char temp[])$/;"	f
idcode	src/ipdc/align_sort.h	/^	char *idcode;$/;"	m	struct:pmupdc_id_list
idcode	src/ipdc/parser.h	/^	unsigned char *idcode;$/;"	m	struct:cfg_frame
idcode	src/ipdc/parser.h	/^	unsigned char *idcode;$/;"	m	struct:data_frame
idcode	src/ipdc/parser.h	/^	unsigned char *idcode;$/;"	m	struct:for_each_pmu
idcode	src/ipdc/parser.h	/^	unsigned char idcode[3];$/;"	m	struct:status_change_pmupdcid
idlist	src/ipdc/align_sort.h	/^	struct pmupdc_id_list *idlist;$/;"	m	struct:TimeStampBuffer	typeref:struct:TimeStampBuffer::pmupdc_id_list
int_to_ascii_convertor	src/ipdc/parser.c	/^void int_to_ascii_convertor(unsigned int n,unsigned char hex[]) {$/;"	f
intermediate_dispatch	src/ipdc/align_sort.c	/^void intermediate_dispatch(int xx) {$/;"	f
ip	src/ipdc/connections.h	/^	char ip[16];$/;"	m	struct:Lower_Layer_Details
ip	src/ipdc/connections.h	/^	char ip[16];$/;"	m	struct:Upper_Layer_Details
ipList	globals.py	/^ipList = {IP:[],NAME:[],PASSWD:[]}$/;"	v
ipRead	functions.py	/^def ipRead(filename):$/;"	f
ipRead	main.py	/^from functions import topologyRead,ipRead,checkAvaialbleMachines,displayTopology,displayPDCs$/;"	i
ipdcFilePath	src/ipdc/global.h	/^char ipdcFilePath[200];$/;"	v
ipdcFolderPath	src/ipdc/global.h	/^char ipdcFolderPath[200];$/;"	v
itemgetter	deployPDC.py	/^from operator import itemgetter$/;"	i
itemgetter	functions.py	/^from operator import itemgetter$/;"	i
li2c	src/ipmu/function.c	/^void li2c (long int t1, unsigned char temp_1[])$/;"	f
li2c_3byte	src/ipmu/function.c	/^void li2c_3byte (long int t1, unsigned char temp3[])$/;"	f
llpmu_addr	src/ipdc/connections.h	/^	struct sockaddr_in llpmu_addr;$/;"	m	struct:Lower_Layer_Details	typeref:struct:Lower_Layer_Details::sockaddr_in
logFile	src/ipmu/iPMU.h	/^FILE *logFile;  \/\/\/KK$/;"	v
logTimeBuff	src/ipdc/global.h	/^char *logTimeBuff;$/;"	v
logTimeBuffBakup	src/ipdc/global.h	/^char *logTimeBuffBakup;$/;"	v
logfilename	src/ipmu/iPMU.h	/^char logfilename[10]; \/\/KK$/;"	v
long_int_to_ascii_convertor	src/ipdc/parser.c	/^void long_int_to_ascii_convertor(unsigned long int n,unsigned char hex[]) {$/;"	f
main	main.py	/^def main():$/;"	f
main	src/ipdc/ipdc.c	/^int main(int argc, char **argv)$/;"	f
main	src/ipmu/iPMU.c	/^int main(int argc,char **argv)$/;"	f
maxHi	src/ipdc/applications.h	/^int minHi = 3,maxHi = 5;$/;"	v
measurement_Return	src/ipmu/function.c	/^char* measurement_Return ()$/;"	f
minHi	src/ipdc/applications.h	/^int minHi = 3,maxHi = 5;$/;"	v
mutex_Lower_Layer_Details	src/ipdc/global.h	/^pthread_mutex_t mutex_Lower_Layer_Details;  \/* To lock objects of connection table that hold lower layer PMU\/PDC ip and protocol *\/$/;"	v
mutex_Upper_Layer_Details	src/ipdc/global.h	/^pthread_mutex_t mutex_Upper_Layer_Details;  \/* To lock objects of connection table that hold upper layer PDC ip and protocol *\/$/;"	v
mutex_cfg	src/ipdc/global.h	/^pthread_mutex_t mutex_cfg;  \/* To lock cfg data objects *\/$/;"	v
mutex_data	src/ipmu/connection.c	/^pthread_mutex_t mutex_data = PTHREAD_MUTEX_INITIALIZER;$/;"	v
mutex_data	src/ipmu/connection.h	/^pthread_mutex_t mutex_data;  \/* To manage data ON\/OFF *\/$/;"	v
mutex_log_write	src/ipdc/global.h	/^pthread_mutex_t mutex_log_write;$/;"	v
mutex_on_TSB	src/ipdc/global.h	/^pthread_mutex_t mutex_on_TSB;$/;"	v
mutex_status_change	src/ipdc/global.h	/^pthread_mutex_t mutex_status_change;$/;"	v
myfree	src/ipdc/dallocate.c	/^void myfree(void * ptr)$/;"	f
ncmp_cbyc	src/ipdc/parser.c	/^int ncmp_cbyc(unsigned char dst[],unsigned char src[],int size) {$/;"	f
next	src/ipdc/connections.h	/^	struct Lower_Layer_Details *next;$/;"	m	struct:Lower_Layer_Details	typeref:struct:Lower_Layer_Details::Lower_Layer_Details
next	src/ipdc/connections.h	/^	struct Upper_Layer_Details *next;$/;"	m	struct:Upper_Layer_Details	typeref:struct:Upper_Layer_Details::Upper_Layer_Details
nextid	src/ipdc/align_sort.h	/^	struct pmupdc_id_list *nextid;$/;"	m	struct:pmupdc_id_list	typeref:struct:pmupdc_id_list::pmupdc_id_list
num	src/ipdc/align_sort.h	/^	int num; \/\/ Total Number of PMUs$/;"	m	struct:TimeStampBuffer
num_pmu	src/ipdc/align_sort.h	/^	int num_pmu;$/;"	m	struct:pmupdc_id_list
num_pmu	src/ipdc/parser.h	/^	int num_pmu;$/;"	m	struct:data_frame
num_pmu	src/ipdc/parser.h	/^	unsigned char *num_pmu;$/;"	m	struct:cfg_frame
numbytes	src/ipdc/connections.h	/^int UL_UDP_addr_len,UL_TCP_sin_size, numbytes;$/;"	v
numbytes	src/ipmu/connection.h	/^int UDP_addr_len,TCP_sin_size, numbytes;$/;"	v
oldDataFramesTimeStampList	src/ipdc/align_sort.h	/^struct  oldDataFramesTimeStampList$/;"	s
old_df_front	src/ipdc/align_sort.h	/^int old_df_front = -1;$/;"	v
old_df_rear	src/ipdc/align_sort.h	/^int old_df_rear = -1;$/;"	v
old_fsize	src/ipdc/global.h	/^int old_fsize;$/;"	v
os	functions.py	/^import os$/;"	i
os	main.py	/^import os$/;"	i
os	main.py	/^import os.path$/;"	i
p_thread	src/ipdc/global.h	/^pthread_t UDP_thread,TCP_thread,p_thread;$/;"	v
paramiko	functions.py	/^import paramiko$/;"	i
paramiko	main.py	/^import paramiko$/;"	i
path	main.py	/^import os.path$/;"	i
pdcFileNames	globals.py	/^pdcFileNames = {}$/;"	v
pdc_addr	src/ipdc/connections.h	/^	struct sockaddr_in pdc_addr;$/;"	m	struct:Upper_Layer_Details	typeref:struct:Upper_Layer_Details::sockaddr_in
phase_ang	src/ipmu/iPMU.c	/^float phase_ang[] 	= {-120.6,0.65,120.45}; $/;"	v
phasor	src/ipdc/parser.h	/^	unsigned char phasor;$/;"	m	struct:format
phasorI_meg	src/ipmu/iPMU.c	/^float phasorI_meg[] = {0.998,1.0,0.994};	\/\/ Current nominal as 1.0Amp$/;"	v
phasorV_meg	src/ipmu/iPMU.c	/^float phasorV_meg[] = {63.48,63.50,63.52};	\/\/ Voltage nominal as 63.5V$/;"	v
phasors	src/ipdc/parser.h	/^	unsigned char **phasors;$/;"	m	struct:data_for_each_pmu
phnames	src/ipdc/parser.h	/^	unsigned char **phnames;$/;"	m	struct:channel_names
phnmr	src/ipdc/parser.h	/^	int phnmr;$/;"	m	struct:data_for_each_pmu
phnmr	src/ipdc/parser.h	/^	unsigned char *phnmr;$/;"	m	struct:for_each_pmu
phunit	src/ipdc/parser.h	/^	unsigned char **phunit;$/;"	m	struct:for_each_pmu
pmu	src/ipdc/parser.h	/^	struct for_each_pmu **pmu;$/;"	m	struct:cfg_frame	typeref:struct:cfg_frame::for_each_pmu
pmu_remove	src/ipdc/connections.h	/^	int pmu_remove;$/;"	m	struct:Lower_Layer_Details
pmuid	src/ipdc/connections.h	/^	unsigned int pmuid;$/;"	m	struct:Lower_Layer_Details
pmuid_next	src/ipdc/parser.h	/^	struct status_change_pmupdcid *pmuid_next;$/;"	m	struct:status_change_pmupdcid	typeref:struct:status_change_pmupdcid::status_change_pmupdcid
pmupdc_id_list	src/ipdc/align_sort.h	/^struct pmupdc_id_list {$/;"	s
pmuse	src/ipmu/iPMU.c	/^int pmuse = 0;$/;"	v
polar	src/ipdc/parser.h	/^	unsigned char polar;$/;"	m	struct:format
populateDataInPDCFile	deployPDC.py	/^def populateDataInPDCFile(ipIndex,pmuIndex):$/;"	f
populateDestDeviceDetailsInCSV	deployPDC.py	/^def populateDestDeviceDetailsInCSV(result_writer,z):$/;"	f
populateSourceDeviceDetailsInCSV	deployPDC.py	/^def populateSourceDeviceDetailsInCSV(result_writer,z):$/;"	f
port	src/ipdc/connections.h	/^	int port;$/;"	m	struct:Lower_Layer_Details
port	src/ipdc/connections.h	/^	int port;$/;"	m	struct:Upper_Layer_Details
prev	src/ipdc/connections.h	/^	struct Lower_Layer_Details *prev;$/;"	m	struct:Lower_Layer_Details	typeref:struct:Lower_Layer_Details::Lower_Layer_Details
prev	src/ipdc/connections.h	/^	struct Upper_Layer_Details *prev;$/;"	m	struct:Upper_Layer_Details	typeref:struct:Upper_Layer_Details::Upper_Layer_Details
prev_soc	src/ipmu/iPMU.c	/^long int prev_soc = 0;$/;"	v
protocol	src/ipdc/connections.h	/^	char protocol[4];$/;"	m	struct:Lower_Layer_Details
protocol	src/ipdc/connections.h	/^	char protocol[4];$/;"	m	struct:Upper_Layer_Details
put_data_transmission_off	src/ipdc/new_pmu_or_pdc.c	/^int put_data_transmission_off(char pmuid[], char protocol[]) {$/;"	f
put_data_transmission_on	src/ipdc/new_pmu_or_pdc.c	/^int put_data_transmission_on(char pmuid[], char protocol[]) {$/;"	f
randomGenerator	src/ipdc/applications.c	/^int * randomGenerator(int max,int min,int num) {$/;"	f
ratio	src/ipdc/applications.h	/^float ratio = 1\/5;$/;"	v
ready_to_send	src/ipdc/align_sort.h	/^	int ready_to_send;$/;"	m	struct:TimeStampBuffer
rear	src/ipdc/align_sort.h	/^int rear=-1;$/;"	v
remove_Lower_Node	src/ipdc/new_pmu_or_pdc.c	/^int remove_Lower_Node(char pmuid[], char protocol[]) {$/;"	f
remove_PDC	src/ipdc/new_pmu_or_pdc.c	/^int remove_PDC(char ip[], char port_num[], char protocol[]) {$/;"	f
remove_id_from_status_change_list	src/ipdc/parser.c	/^void remove_id_from_status_change_list(unsigned char idcode[]) { $/;"	f
remove_llnode	src/ipdc/new_pmu_or_pdc.c	/^void* remove_llnode(void* temp) {$/;"	f
request_cfg_frame	src/ipdc/connections.h	/^	int request_cfg_frame;$/;"	m	struct:Lower_Layer_Details
root_pmuid	src/ipdc/parser.h	/^}*root_pmuid;$/;"	v	typeref:struct:status_change_pmupdcid
runiPDCOnRemoteMachine	deployPDC.py	/^def runiPDCOnRemoteMachine(i,ind,deviceId,ssh_client):$/;"	f
sa	src/ipdc/connections.h	/^struct sigaction sa;$/;"	v	typeref:struct:sigaction
sa	src/ipmu/connection.h	/^struct sigaction sa;$/;"	v	typeref:struct:sigaction
server	src/ipmu/connection.c	/^void server(int id, int uport, int tport)$/;"	f
setup	src/ipdc/connections.c	/^void setup(){$/;"	f
sigchld_handler	src/ipdc/connections.c	/^void sigchld_handler(int s) {$/;"	f
sigchld_handler	src/ipmu/function.c	/^void sigchld_handler(int s)$/;"	f
sleep	deployPDC.py	/^from time import sleep$/;"	i
sleep	deployPMU.py	/^from time import sleep$/;"	i
sleep	functions.py	/^from time import sleep$/;"	i
smallBuff	src/ipdc/global.h	/^char *smallBuff;$/;"	v
soc	src/ipdc/align_sort.h	/^	char *soc;$/;"	m	struct:TimeStampBuffer
soc	src/ipdc/align_sort.h	/^	unsigned int soc;$/;"	m	struct:oldDataFramesTimeStampList
soc	src/ipdc/parser.h	/^	unsigned char *soc;$/;"	m	struct:cfg_frame
soc	src/ipdc/parser.h	/^	unsigned char *soc;$/;"	m	struct:data_frame
soc	src/ipmu/iPMU.h	/^long int soc, fracsec, fsecNum;$/;"	v
sockfd	src/ipdc/connections.h	/^	int sockfd;$/;"	m	struct:Lower_Layer_Details
sockfd	src/ipdc/connections.h	/^	int sockfd;$/;"	m	struct:PMUData
sockfd	src/ipdc/connections.h	/^	int sockfd;$/;"	m	struct:Upper_Layer_Details
sort_data_inside_TSB	src/ipdc/align_sort.c	/^void sort_data_inside_TSB(int index) { $/;"	f
stat	src/ipdc/parser.h	/^	unsigned char *stat;$/;"	m	struct:data_for_each_pmu
status	src/ipmu/connection.h	/^struct status $/;"	s
status_change_pmupdcid	src/ipdc/parser.h	/^struct status_change_pmupdcid {$/;"	s
status_info	src/ipmu/connection.h	/^}*status_info;$/;"	v	typeref:struct:status
stn	src/ipdc/parser.h	/^	unsigned char *stn;$/;"	m	struct:for_each_pmu
sys	main.py	/^import sys$/;"	i
tcp_new_fd	src/ipmu/connection.h	/^	int tcp_new_fd; $/;"	m	struct:status
tcp_send_status	src/ipmu/connection.h	/^	int tcp_send_status; $/;"	m	struct:status
tcp_send_status	src/ipmu/connection.h	/^int tcp_send_status;	\/\/ 0-ON, 1-OFF$/;"	v
tcpup	src/ipdc/connections.h	/^	int tcpup;$/;"	m	struct:Upper_Layer_Details
thread_id	src/ipdc/connections.h	/^	pthread_t thread_id;$/;"	m	struct:Lower_Layer_Details
thread_id	src/ipdc/connections.h	/^	pthread_t thread_id;$/;"	m	struct:Upper_Layer_Details
tim	src/ipmu/iPMU.h	/^struct timeval tim;$/;"	v	typeref:struct:timeval
time_align	src/ipdc/align_sort.c	/^void time_align(struct data_frame *df) {$/;"	f
time_base	src/ipdc/parser.h	/^	unsigned char *time_base;$/;"	m	struct:cfg_frame
tname	src/ipdc/global.h	/^char tname[20];$/;"	v
to_int_convertor	src/ipmu/function.c	/^unsigned int to_int_convertor(unsigned char array[]) {$/;"	f
to_intconvertor	src/ipdc/parser.c	/^unsigned int to_intconvertor(unsigned char array[]) {$/;"	f
to_long_int_convertor	src/ipdc/parser.c	/^unsigned int to_long_int_convertor(unsigned char array[]) {$/;"	f
to_long_int_convertor	src/ipmu/function.c	/^unsigned int to_long_int_convertor(unsigned char array[]) {$/;"	f
to_long_int_convertor1	src/ipdc/parser.c	/^unsigned int to_long_int_convertor1(unsigned char array[]) {$/;"	f
to_long_int_convertor1	src/ipmu/function.c	/^unsigned int to_long_int_convertor1(unsigned char array[]) {$/;"	f
topology	globals.py	/^topology = {IDCODE:[],TYPE:[],SRC_ID:[],DEST_ID:[], UDPPORT:[],TCPPORT:[],DATAINPUT:[],FILENAME:[],DATARATE:[],PROTOCOL:[]}$/;"	v
topologyRead	functions.py	/^def topologyRead(filename):$/;"	f
topologyRead	main.py	/^from functions import topologyRead,ipRead,checkAvaialbleMachines,displayTopology,displayPDCs$/;"	i
udp_send_status	src/ipmu/connection.h	/^	int udp_send_status; $/;"	m	struct:status
udp_send_status	src/ipmu/connection.h	/^int udp_send_status;	\/\/ 0-ON, 1-OFF$/;"	v
up	src/ipdc/connections.h	/^	int up; 			\/* used only in tcp *\/$/;"	m	struct:Lower_Layer_Details
voltagePhasorAggregation	src/ipdc/applications.c	/^float voltagePhasorAggregation(int i) {$/;"	f
writeTimeToLog	src/ipdc/parser.c	/^void writeTimeToLog(int index,unsigned int IDcode,unsigned long int l_soc,unsigned long int l_fracsec) { $/;"	f
yes	src/ipdc/connections.c	/^int yes = 1; 	\/* argument to setsockopt *\/$/;"	v
yes	src/ipmu/connection.c	/^int yes = 1; 	\/* argument to setsockopt *\/$/;"	v
