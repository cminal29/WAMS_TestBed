!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BACKLOG	connections.h	39;"	d
CFGSYNC	global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v
CMDCFGSEND	global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v
CMDDATAOFF	global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v
CMDDATASEND	global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v
CMDSYNC	global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v
DATASYNC	global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v
DBPORT	connections.h	38;"	d
DB_Server_addr	global.h	/^struct sockaddr_in DB_Server_addr; \/\/ DB Address Information$/;"	v	typeref:struct:sockaddr_in
DB_addr_len	global.h	/^int DB_sockfd,DB_addr_len;$/;"	v
DB_sockfd	global.h	/^int DB_sockfd,DB_addr_len;$/;"	v
LLfirst	connections.h	/^}*LLfirst,*LLlast;$/;"	v	typeref:struct:Lower_Layer_Details
LLlast	connections.h	/^}*LLfirst,*LLlast;$/;"	v	typeref:struct:Lower_Layer_Details
Lower_Layer_Details	connections.h	/^struct Lower_Layer_Details {$/;"	s
MAXBUFLEN	global.h	35;"	d
MAXTSB	align_sort.h	30;"	d
MAX_STRING_SIZE	global.h	34;"	d
ODFT	align_sort.h	/^}ODFT[OLDFRAMECOUNT];$/;"	v	typeref:struct:oldDataFramesTimeStampList
OLDFRAMECOUNT	align_sort.h	31;"	d
PDC_IDCODE	global.h	/^int PDC_IDCODE,TCPPORT,UDPPORT;$/;"	v
PMUData	connections.h	/^struct PMUData{$/;"	s
PMU_addr	connections.h	/^	struct sockaddr_in PMU_addr;$/;"	m	struct:PMUData	typeref:struct:PMUData::sockaddr_in
PMU_process_TCP	connections.c	/^void PMU_process_TCP(unsigned char tcp_buffer[],int sockfd) {$/;"	f
PMU_process_UDP	connections.c	/^void* PMU_process_UDP(void *pmu_data) {$/;"	f
Pj	applications.h	/^float Pj = 30;$/;"	v
TCPPORT	global.h	/^int PDC_IDCODE,TCPPORT,UDPPORT;$/;"	v
TCP_my_addr	global.h	/^struct sockaddr_in UDP_my_addr,TCP_my_addr; \/* my address information *\/$/;"	v	typeref:struct:
TCP_thread	global.h	/^pthread_t UDP_thread,TCP_thread,p_thread;$/;"	v
TSB	align_sort.h	/^}TSB[MAXTSB];$/;"	v	typeref:struct:TimeStampBuffer
TimeStampBuffer	align_sort.h	/^struct TimeStampBuffer {$/;"	s
Tsb_Count	align_sort.h	/^int Tsb_Count = 0;$/;"	v
UDPPORT	global.h	/^int PDC_IDCODE,TCPPORT,UDPPORT;$/;"	v
UDP_my_addr	global.h	/^struct sockaddr_in UDP_my_addr,TCP_my_addr; \/* my address information *\/$/;"	v	typeref:struct:sockaddr_in
UDP_thread	global.h	/^pthread_t UDP_thread,TCP_thread,p_thread;$/;"	v
UL_TCP_addr	global.h	/^struct sockaddr_in UL_UDP_addr,UL_TCP_addr; \/* connector’s address information *\/$/;"	v	typeref:struct:
UL_TCP_sin_size	connections.h	/^int UL_UDP_addr_len,UL_TCP_sin_size, numbytes;$/;"	v
UL_TCP_sockfd	global.h	/^int UL_UDP_sockfd,UL_TCP_sockfd; \/* socket descriptors *\/$/;"	v
UL_UDP_addr	global.h	/^struct sockaddr_in UL_UDP_addr,UL_TCP_addr; \/* connector’s address information *\/$/;"	v	typeref:struct:sockaddr_in
UL_UDP_addr_len	connections.h	/^int UL_UDP_addr_len,UL_TCP_sin_size, numbytes;$/;"	v
UL_UDP_sockfd	global.h	/^int UL_UDP_sockfd,UL_TCP_sockfd; \/* socket descriptors *\/$/;"	v
UL_data_transmission_off	connections.h	/^	int UL_data_transmission_off;$/;"	m	struct:Upper_Layer_Details
UL_tcp	connections.c	/^void* UL_tcp() {$/;"	f
UL_tcp_command	connections.h	/^unsigned char UL_tcp_command[19];$/;"	v
UL_tcp_connection	connections.c	/^void* UL_tcp_connection(void * temp_pdc) {$/;"	f
UL_udp	connections.c	/^void* UL_udp(){$/;"	f
UL_udp_command	connections.h	/^unsigned char UL_udp_command[19];$/;"	v
UL_upper_pdc_cfgsent	connections.h	/^	int UL_upper_pdc_cfgsent;$/;"	m	struct:Upper_Layer_Details
ULfirst	connections.h	/^}*ULfirst,*ULlast;$/;"	v	typeref:struct:Upper_Layer_Details
ULlast	connections.h	/^}*ULfirst,*ULlast;$/;"	v	typeref:struct:Upper_Layer_Details
Upper_Layer_Details	connections.h	/^struct Upper_Layer_Details {$/;"	s
add_PDC	new_pmu_or_pdc.c	/^int add_PDC(char ip[], char protocol[]) {$/;"	f
add_PMU	new_pmu_or_pdc.c	/^int add_PMU(char pmuid[], char ip[], char port[], char protocol[]) {$/;"	f
add_PMU_Node	new_pmu_or_pdc.c	/^void add_PMU_Node(struct Lower_Layer_Details *temp_pmu) {$/;"	f
add_id_to_status_change_list	parser.c	/^void add_id_to_status_change_list(unsigned char idcode[]) { $/;"	f
address_set	connections.h	/^	int address_set;$/;"	m	struct:Upper_Layer_Details
adjustOldFrameCount	align_sort.c	/^void adjustOldFrameCount(int index) {$/;"	f
analog	parser.h	/^	unsigned char **analog;	$/;"	m	struct:data_for_each_pmu
analog	parser.h	/^	unsigned char analog;$/;"	m	struct:format
angleInstability	applications.c	/^int angleInstability(int i) {$/;"	f
angnames	parser.h	/^	unsigned char **angnames;$/;"	m	struct:channel_names
annmr	parser.h	/^	int annmr;$/;"	m	struct:data_for_each_pmu
annmr	parser.h	/^	unsigned char *annmr;$/;"	m	struct:for_each_pmu
anunit	parser.h	/^	unsigned char **anunit;$/;"	m	struct:for_each_pmu
assign_df_to_TSB	align_sort.c	/^void assign_df_to_TSB(struct data_frame *df,int index) { $/;"	f
averageFrequency	applications.c	/^float averageFrequency(int i) {$/;"	f
byte_by_byte_copy	parser.c	/^void byte_by_byte_copy(unsigned char dst[],unsigned char src[],int index,int n) {$/;"	f
cfg_cnt	parser.h	/^	unsigned char *cfg_cnt;$/;"	m	struct:for_each_pmu
cfg_frame	parser.h	/^struct  cfg_frame {$/;"	s
cfgfirst	parser.h	/^}*cfgfirst;$/;"	v	typeref:struct:cfg_frame
cfgframe	global.h	/^unsigned char *cfgframe,*dataframe;$/;"	v
cfgnext	parser.h	/^	struct  cfg_frame *cfgnext;$/;"	m	struct:cfg_frame	typeref:struct:cfg_frame::cfg_frame
cfgparser	parser.c	/^void cfgparser(unsigned char st[]){ $/;"	f
channel_names	parser.h	/^struct channel_names {$/;"	s
check_statword	parser.c	/^int check_statword(unsigned char stat[]) { $/;"	f
checkip	new_pmu_or_pdc.c	/^int checkip(char ip[]) {$/;"	f
clear_TSB	align_sort.c	/^void clear_TSB(int index) { \/\/ $/;"	f
cnext	parser.h	/^	struct channel_names *cnext;$/;"	m	struct:for_each_pmu	typeref:struct:for_each_pmu::channel_names
compute_CRC	parser.c	/^uint16_t compute_CRC(unsigned char *message,int length) {$/;"	f
config_change	connections.h	/^	int config_change;$/;"	m	struct:Upper_Layer_Details
config_request	new_pmu_or_pdc.c	/^void* config_request(void* temp) {$/;"	f
configuration_request	new_pmu_or_pdc.c	/^int configuration_request(char pmuid[], char protocol[]) {$/;"	f
connect_pmu_tcp	new_pmu_or_pdc.c	/^void* connect_pmu_tcp(void *temp) {$/;"	f
connect_pmu_udp	new_pmu_or_pdc.c	/^void* connect_pmu_udp(void *temp) {$/;"	f
copy_cbyc	parser.c	/^void copy_cbyc(unsigned char dst[],unsigned char s[],int size) {$/;"	f
count	align_sort.h	/^	int count; \/\/ Current index$/;"	m	struct:TimeStampBuffer
counter	align_sort.h	/^	int counter; \/\/ Timer that will be initially set to 0$/;"	m	struct:TimeStampBuffer
create_cfgframe	align_sort.c	/^int create_cfgframe() { $/;"	f
create_command_frame	new_pmu_or_pdc.c	/^void create_command_frame(int type,int pmu_id,char cmdframe[]) {$/;"	f
create_dataframe	align_sort.c	/^int create_dataframe(int index) {$/;"	f
dLog	global.h	/^char *dLog;$/;"	v
data	connections.h	/^	unsigned char *data;$/;"	m	struct:PMUData
dataWriteInFile	parser.c	/^void* dataWriteInFile() {$/;"	f
data_for_each_pmu	parser.h	/^struct data_for_each_pmu {$/;"	s
data_format	parser.h	/^	unsigned char *data_format;$/;"	m	struct:for_each_pmu
data_frame	parser.h	/^struct data_frame {$/;"	s
data_off_llnode	new_pmu_or_pdc.c	/^void* data_off_llnode(void* temp) {$/;"	f
data_on_llnode	new_pmu_or_pdc.c	/^void* data_on_llnode(void* temp) {$/;"	f
data_rate	parser.h	/^	unsigned char *data_rate;$/;"	m	struct:cfg_frame
data_transmission_off	connections.h	/^	int data_transmission_off;$/;"	m	struct:Lower_Layer_Details
dataframe	global.h	/^unsigned char *cfgframe,*dataframe;$/;"	v
dataparser	parser.c	/^int dataparser(unsigned char data[]) { $/;"	f
dbserver_ip	global.h	/^char dbserver_ip[20];$/;"	v
decode_ieee_single	parser.c	/^float decode_ieee_single(const void *v) {$/;"	f
delFThreshold	applications.h	/^float delFThreshold = 0.3;$/;"	v
dfreq	parser.h	/^	unsigned char *dfreq;$/;"	m	struct:data_for_each_pmu
dg_next	parser.h	/^	struct dgnames *dg_next;$/;"	m	struct:dgnames	typeref:struct:dgnames::dgnames
dgn	parser.h	/^	unsigned char **dgn; \/\/ Stores 16 digital names for each word$/;"	m	struct:dgnames
dgnames	parser.h	/^struct dgnames {$/;"	s
dgnmr	parser.h	/^	int dgnmr;$/;"	m	struct:data_for_each_pmu
dgnmr	parser.h	/^	unsigned char *dgnmr;$/;"	m	struct:for_each_pmu
dgunit	parser.h	/^	unsigned char **dgunit;$/;"	m	struct:for_each_pmu
digital	parser.h	/^	unsigned char **digital;$/;"	m	struct:data_for_each_pmu
dispatch	align_sort.c	/^void dispatch(int index) {$/;"	f
display_CT	new_pmu_or_pdc.c	/^void display_CT() {$/;"	f
display_buf	connections.c	/^char display_buf[200];$/;"	v
dnext	parser.h	/^	struct data_frame *dnext;$/;"	m	struct:data_frame	typeref:struct:data_frame::data_frame
dpmu	parser.h	/^	struct data_for_each_pmu **dpmu;$/;"	m	struct:data_frame	typeref:struct:data_frame::data_for_each_pmu
f	global.h	/^FILE *fp_log,*fp_updc,*f;$/;"	v
fc	applications.h	/^float fc = 0;$/;"	v
first	parser.h	/^	struct dgnames *first;$/;"	m	struct:channel_names	typeref:struct:channel_names::dgnames
first_data_frame	align_sort.h	/^	struct data_frame *first_data_frame;$/;"	m	struct:TimeStampBuffer	typeref:struct:TimeStampBuffer::data_frame
fmt	parser.h	/^	struct format *fmt;$/;"	m	struct:data_for_each_pmu	typeref:struct:data_for_each_pmu::format
fmt	parser.h	/^	struct format *fmt;$/;"	m	struct:for_each_pmu	typeref:struct:for_each_pmu::format
fnom	parser.h	/^	unsigned char *fnom;$/;"	m	struct:for_each_pmu
for_each_pmu	parser.h	/^struct for_each_pmu{$/;"	s
format	parser.h	/^struct format{$/;"	s
fp_log	global.h	/^FILE *fp_log,*fp_updc,*f;$/;"	v
fp_updc	global.h	/^FILE *fp_log,*fp_updc,*f;$/;"	v
fracsec	align_sort.h	/^	char *fracsec;$/;"	m	struct:TimeStampBuffer
fracsec	align_sort.h	/^	unsigned int fracsec;$/;"	m	struct:oldDataFramesTimeStampList
fracsec	parser.h	/^	unsigned char *fracsec;$/;"	m	struct:cfg_frame
fracsec	parser.h	/^	unsigned char *fracsec;$/;"	m	struct:data_frame
framesize	parser.h	/^	unsigned char *framesize;$/;"	m	struct:cfg_frame
framesize	parser.h	/^	unsigned char *framesize;$/;"	m	struct:data_frame
free_2darray	dallocate.c	/^void free_2darray(unsigned char** array, int n){ $/;"	f
free_cfgframe_object	dallocate.c	/^void free_cfgframe_object(struct cfg_frame *cfg) { $/;"	f
free_dataframe_object	dallocate.c	/^void free_dataframe_object(struct data_frame *df) { $/;"	f
freq	parser.h	/^	unsigned char *freq;$/;"	m	struct:data_for_each_pmu
freq	parser.h	/^	unsigned char freq;$/;"	m	struct:format
frequencyInstability	applications.c	/^int frequencyInstability(int i) {$/;"	f
front	align_sort.h	/^int front = -1;$/;"	v
generate_dummy_dataframe	align_sort.c	/^struct data_frame* generate_dummy_dataframe(unsigned char *idcode)$/;"	f
getPhasorAngle	applications.c	/^float getPhasorAngle(int format,char left[],char right[],unsigned char *d,int polar,struct cfg_frame *temp_cfg,i,j) {$/;"	f
idcode	align_sort.h	/^	char *idcode;$/;"	m	struct:pmupdc_id_list
idcode	parser.h	/^	unsigned char *idcode;$/;"	m	struct:cfg_frame
idcode	parser.h	/^	unsigned char *idcode;$/;"	m	struct:data_frame
idcode	parser.h	/^	unsigned char *idcode;$/;"	m	struct:for_each_pmu
idcode	parser.h	/^	unsigned char idcode[3];$/;"	m	struct:status_change_pmupdcid
idlist	align_sort.h	/^	struct pmupdc_id_list *idlist;$/;"	m	struct:TimeStampBuffer	typeref:struct:TimeStampBuffer::pmupdc_id_list
int_to_ascii_convertor	parser.c	/^void int_to_ascii_convertor(unsigned int n,unsigned char hex[]) {$/;"	f
intermediate_dispatch	align_sort.c	/^void intermediate_dispatch(int xx) {$/;"	f
ip	connections.h	/^	char ip[16];$/;"	m	struct:Lower_Layer_Details
ip	connections.h	/^	char ip[16];$/;"	m	struct:Upper_Layer_Details
ipdcFilePath	global.h	/^char ipdcFilePath[200];$/;"	v
ipdcFolderPath	global.h	/^char ipdcFolderPath[200];$/;"	v
llpmu_addr	connections.h	/^	struct sockaddr_in llpmu_addr;$/;"	m	struct:Lower_Layer_Details	typeref:struct:Lower_Layer_Details::sockaddr_in
logTimeBuff	global.h	/^char *logTimeBuff;$/;"	v
logTimeBuffBakup	global.h	/^char *logTimeBuffBakup;$/;"	v
long_int_to_ascii_convertor	parser.c	/^void long_int_to_ascii_convertor(unsigned long int n,unsigned char hex[]) {$/;"	f
main	ipdc.c	/^int main(int argc, char **argv)$/;"	f
maxHi	applications.h	/^int minHi = 3,maxHi = 5;$/;"	v
minHi	applications.h	/^int minHi = 3,maxHi = 5;$/;"	v
mutex_Lower_Layer_Details	global.h	/^pthread_mutex_t mutex_Lower_Layer_Details;  \/* To lock objects of connection table that hold lower layer PMU\/PDC ip and protocol *\/$/;"	v
mutex_Upper_Layer_Details	global.h	/^pthread_mutex_t mutex_Upper_Layer_Details;  \/* To lock objects of connection table that hold upper layer PDC ip and protocol *\/$/;"	v
mutex_cfg	global.h	/^pthread_mutex_t mutex_cfg;  \/* To lock cfg data objects *\/$/;"	v
mutex_log_write	global.h	/^pthread_mutex_t mutex_log_write;$/;"	v
mutex_on_TSB	global.h	/^pthread_mutex_t mutex_on_TSB;$/;"	v
mutex_status_change	global.h	/^pthread_mutex_t mutex_status_change;$/;"	v
myfree	dallocate.c	/^void myfree(void * ptr)$/;"	f
ncmp_cbyc	parser.c	/^int ncmp_cbyc(unsigned char dst[],unsigned char src[],int size) {$/;"	f
next	connections.h	/^	struct Lower_Layer_Details *next;$/;"	m	struct:Lower_Layer_Details	typeref:struct:Lower_Layer_Details::Lower_Layer_Details
next	connections.h	/^	struct Upper_Layer_Details *next;$/;"	m	struct:Upper_Layer_Details	typeref:struct:Upper_Layer_Details::Upper_Layer_Details
nextid	align_sort.h	/^	struct pmupdc_id_list *nextid;$/;"	m	struct:pmupdc_id_list	typeref:struct:pmupdc_id_list::pmupdc_id_list
num	align_sort.h	/^	int num; \/\/ Total Number of PMUs$/;"	m	struct:TimeStampBuffer
num_pmu	align_sort.h	/^	int num_pmu;$/;"	m	struct:pmupdc_id_list
num_pmu	parser.h	/^	int num_pmu;$/;"	m	struct:data_frame
num_pmu	parser.h	/^	unsigned char *num_pmu;$/;"	m	struct:cfg_frame
numbytes	connections.h	/^int UL_UDP_addr_len,UL_TCP_sin_size, numbytes;$/;"	v
oldDataFramesTimeStampList	align_sort.h	/^struct  oldDataFramesTimeStampList$/;"	s
old_df_front	align_sort.h	/^int old_df_front = -1;$/;"	v
old_df_rear	align_sort.h	/^int old_df_rear = -1;$/;"	v
old_fsize	global.h	/^int old_fsize;$/;"	v
p_thread	global.h	/^pthread_t UDP_thread,TCP_thread,p_thread;$/;"	v
pdc_addr	connections.h	/^	struct sockaddr_in pdc_addr;$/;"	m	struct:Upper_Layer_Details	typeref:struct:Upper_Layer_Details::sockaddr_in
phasor	parser.h	/^	unsigned char phasor;$/;"	m	struct:format
phasors	parser.h	/^	unsigned char **phasors;$/;"	m	struct:data_for_each_pmu
phnames	parser.h	/^	unsigned char **phnames;$/;"	m	struct:channel_names
phnmr	parser.h	/^	int phnmr;$/;"	m	struct:data_for_each_pmu
phnmr	parser.h	/^	unsigned char *phnmr;$/;"	m	struct:for_each_pmu
phunit	parser.h	/^	unsigned char **phunit;$/;"	m	struct:for_each_pmu
pmu	parser.h	/^	struct for_each_pmu **pmu;$/;"	m	struct:cfg_frame	typeref:struct:cfg_frame::for_each_pmu
pmu_remove	connections.h	/^	int pmu_remove;$/;"	m	struct:Lower_Layer_Details
pmuid	connections.h	/^	unsigned int pmuid;$/;"	m	struct:Lower_Layer_Details
pmuid_next	parser.h	/^	struct status_change_pmupdcid *pmuid_next;$/;"	m	struct:status_change_pmupdcid	typeref:struct:status_change_pmupdcid::status_change_pmupdcid
pmupdc_id_list	align_sort.h	/^struct pmupdc_id_list {$/;"	s
polar	parser.h	/^	unsigned char polar;$/;"	m	struct:format
port	connections.h	/^	int port;$/;"	m	struct:Lower_Layer_Details
port	connections.h	/^	int port;$/;"	m	struct:Upper_Layer_Details
prev	connections.h	/^	struct Lower_Layer_Details *prev;$/;"	m	struct:Lower_Layer_Details	typeref:struct:Lower_Layer_Details::Lower_Layer_Details
prev	connections.h	/^	struct Upper_Layer_Details *prev;$/;"	m	struct:Upper_Layer_Details	typeref:struct:Upper_Layer_Details::Upper_Layer_Details
protocol	connections.h	/^	char protocol[4];$/;"	m	struct:Lower_Layer_Details
protocol	connections.h	/^	char protocol[4];$/;"	m	struct:Upper_Layer_Details
put_data_transmission_off	new_pmu_or_pdc.c	/^int put_data_transmission_off(char pmuid[], char protocol[]) {$/;"	f
put_data_transmission_on	new_pmu_or_pdc.c	/^int put_data_transmission_on(char pmuid[], char protocol[]) {$/;"	f
randomGenerator	applications.c	/^int * randomGenerator(int max,int min,int num) {$/;"	f
ratio	applications.h	/^float ratio = 1\/5;$/;"	v
ready_to_send	align_sort.h	/^	int ready_to_send;$/;"	m	struct:TimeStampBuffer
rear	align_sort.h	/^int rear=-1;$/;"	v
remove_Lower_Node	new_pmu_or_pdc.c	/^int remove_Lower_Node(char pmuid[], char protocol[]) {$/;"	f
remove_PDC	new_pmu_or_pdc.c	/^int remove_PDC(char ip[], char port_num[], char protocol[]) {$/;"	f
remove_id_from_status_change_list	parser.c	/^void remove_id_from_status_change_list(unsigned char idcode[]) { $/;"	f
remove_llnode	new_pmu_or_pdc.c	/^void* remove_llnode(void* temp) {$/;"	f
request_cfg_frame	connections.h	/^	int request_cfg_frame;$/;"	m	struct:Lower_Layer_Details
root_pmuid	parser.h	/^}*root_pmuid;$/;"	v	typeref:struct:status_change_pmupdcid
sa	connections.h	/^struct sigaction sa;$/;"	v	typeref:struct:sigaction
setup	connections.c	/^void setup(){$/;"	f
sigchld_handler	connections.c	/^void sigchld_handler(int s) {$/;"	f
smallBuff	global.h	/^char *smallBuff;$/;"	v
soc	align_sort.h	/^	char *soc;$/;"	m	struct:TimeStampBuffer
soc	align_sort.h	/^	unsigned int soc;$/;"	m	struct:oldDataFramesTimeStampList
soc	parser.h	/^	unsigned char *soc;$/;"	m	struct:cfg_frame
soc	parser.h	/^	unsigned char *soc;$/;"	m	struct:data_frame
sockfd	connections.h	/^	int sockfd;$/;"	m	struct:Lower_Layer_Details
sockfd	connections.h	/^	int sockfd;$/;"	m	struct:PMUData
sockfd	connections.h	/^	int sockfd;$/;"	m	struct:Upper_Layer_Details
sort_data_inside_TSB	align_sort.c	/^void sort_data_inside_TSB(int index) { $/;"	f
stat	parser.h	/^	unsigned char *stat;$/;"	m	struct:data_for_each_pmu
status_change_pmupdcid	parser.h	/^struct status_change_pmupdcid {$/;"	s
stn	parser.h	/^	unsigned char *stn;$/;"	m	struct:for_each_pmu
tcpup	connections.h	/^	int tcpup;$/;"	m	struct:Upper_Layer_Details
thread_id	connections.h	/^	pthread_t thread_id;$/;"	m	struct:Lower_Layer_Details
thread_id	connections.h	/^	pthread_t thread_id;$/;"	m	struct:Upper_Layer_Details
time_align	align_sort.c	/^void time_align(struct data_frame *df) {$/;"	f
time_base	parser.h	/^	unsigned char *time_base;$/;"	m	struct:cfg_frame
tname	global.h	/^char tname[20];$/;"	v
to_intconvertor	parser.c	/^unsigned int to_intconvertor(unsigned char array[]) {$/;"	f
to_long_int_convertor	parser.c	/^unsigned int to_long_int_convertor(unsigned char array[]) {$/;"	f
to_long_int_convertor1	parser.c	/^unsigned int to_long_int_convertor1(unsigned char array[]) {$/;"	f
up	connections.h	/^	int up; 			\/* used only in tcp *\/$/;"	m	struct:Lower_Layer_Details
voltagePhasorAggregation	applications.c	/^float voltagePhasorAggregation(int i) {$/;"	f
writeTimeToLog	parser.c	/^void writeTimeToLog(int index,unsigned int IDcode,unsigned long int l_soc,unsigned long int l_fracsec) { $/;"	f
yes	connections.c	/^int yes = 1; 	\/* argument to setsockopt *\/$/;"	v
