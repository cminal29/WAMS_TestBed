void adjustOldFrameCount(int index) {

	int flag = 0;
	int i;

	unsigned char *tsb_fsec;
	unsigned int tsb_soc,tsb_fracsec;

	tsb_fsec = malloc(3*sizeof(unsigned char));
	tsb_fsec[0] = TSB[index].fracsec[1];
	tsb_fsec[1] = TSB[index].fracsec[2];
	tsb_fsec[2] = TSB[index].fracsec[3];
				
	tsb_soc = to_long_int_convertor((unsigned char *)TSB[index].soc);
	tsb_fracsec = to_long_int_convertor1(tsb_fsec);	


	if(old_df_rear  >= old_df_front) {
		for(i = old_df_rear; i>= old_df_front; i--) {
			if((ODFT[i].soc == tsb_soc) && (ODFT[i].fracsec == tsb_fracsec)) {

				flag = 1;
				break;
					 
			} else {

				continue;
			} //if for soc ends
		}// for ends					
	} else {

		for(i = old_df_rear; i< old_df_front; i++) {

			if((ODFT[i].soc == tsb_soc) && (ODFT[i].fracsec == tsb_fracsec)) {

				flag = 1;
				break;
					 
			} else {

				continue;
			
			} //if for soc ends
		}// for ends								
	}


	int xx = i;
	if(old_df_front < old_df_rear) {
			
		if(xx == old_df_rear) {
						
			old_df_rear= (old_df_rear - 1)%OLDFRAMECOUNT;
			if(old_df_rear <0)

				old_df_rear = old_df_rear + OLDFRAMECOUNT;//		

		} else if(xx == old_df_front) {
						
			old_df_front = (old_df_front + 1) % OLDFRAMECOUNT;

		}else if(xx < old_df_rear)  {	

			while (xx < old_df_rear) {

				ODFT[xx].soc = ODFT[xx + 1].soc;
				ODFT[xx].fracsec = ODFT[xx + 1].fracsec;
				xx++;
			}

			old_df_rear = (old_df_rear - 1) % OLDFRAMECOUNT;		
			if(old_df_rear < 0)
				old_df_rear = old_df_rear + OLDFRAMECOUNT;

		}
	} else if (old_df_front > old_df_rear) {

		if(xx == old_df_rear) {

			if(old_df_front - old_df_rear == OLDFRAMECOUNT)
			{
							//front = rear;
				old_df_rear = old_df_front;
							
			 } else {							
				
				old_df_rear = old_df_rear - 1;
					if(old_df_rear <0)
						old_df_rear = old_df_rear + OLDFRAMECOUNT;							
			}

		} else if(xx == old_df_front) {
				
			old_df_front = (old_df_front + 1) % OLDFRAMECOUNT;

		} else if (xx > old_df_front) { // xx>front
						
			int rr = xx;
			while (rr != old_df_rear) {

				int h = (rr + 1) % OLDFRAMECOUNT;
				ODFT[rr].soc = ODFT[h].soc;
				ODFT[rr].fracsec = ODFT[h].fracsec;
				rr = (rr + 1) % OLDFRAMECOUNT;
			}
														
			old_df_rear = (old_df_rear - 1) % OLDFRAMECOUNT;
			if(old_df_rear < 0)
				old_df_rear = old_df_rear + OLDFRAMECOUNT;				

		} else if(xx < old_df_front) {

			int rr = xx;
			while (rr != old_df_rear) {

				int h = (rr + 1) % OLDFRAMECOUNT;
				ODFT[rr].soc = ODFT[h].soc;
				ODFT[rr].fracsec = ODFT[h].fracsec;
				rr = (rr + 1) % OLDFRAMECOUNT;
			}
														
			old_df_rear = (old_df_rear - 1) % OLDFRAMECOUNT;
			if(old_df_rear < 0)
				old_df_rear = old_df_rear + OLDFRAMECOUNT;				
		
		}
	} else {
			
		old_df_front = (old_df_front + 1)%OLDFRAMECOUNT;
		old_df_rear = (old_df_rear + 1)%OLDFRAMECOUNT;
//		printf("nn Index %d front %d  rear %d, Tcount %d \n",yy,front,rear,Tsb_Count );
	}
}




/*		f = fopen("tsbLog","w+");
		memset(dLog,'\0',2500);
		if(rear >= front) {
			for(i = rear; i>= front; i--) {
				//	memset(dLog,'\0',2500);

				tsb_soc = to_long_int_convertor((unsigned char *)TSB[i].soc);
				tsb_fsec[0] = TSB[i].fracsec[1];
				tsb_fsec[1] = TSB[i].fracsec[2];
				tsb_fsec[2] = TSB[i].fracsec[3];
				tsb_fracsec = to_long_int_convertor1(tsb_fsec);				

				//if(!ncmp_cbyc ((unsigned char *)TSB[i].soc,df->soc,4)) {
				if(df_soc == tsb_soc) 
				{
					//if(!ncmp_cbyc (tsb_fsec,fsec,3)) { /* 3 bytes is actual fraction of seconds and 1 byte is Time quality  
					if(tsb_fracsec == df_fracsec) {	
						flag = 1;						
						sprintf(dLog,"*Front %d rear %d Flag 1 TSB (index = %d,soc fsec %d,%d) Df (ID = %d soc fsec %d,%d)\n",front,rear,i,tsb_soc,tsb_fracsec,IDcode,df_soc,df_fracsec); 
						fprintf(f,"%s",dLog);
						break;
					} 
				} else {

					sprintf(dLog,"*Front %d rear %d Flag 0 TSB (index = %d,soc fsec %d,%d) Df (ID = %d soc fsec %d,%d)\n",front,rear,i,tsb_soc,tsb_fracsec,IDcode,df_soc,df_fracsec); 
					fprintf(f,"%s",dLog);
					continue;
				} //if for soc ends
			}// for ends					
		} else {

		for(i = rear; i<=front; i++) {
//			for(i = rear; i != front-1; i =(i-1)<0?(i-1+MAXTSB):i-1) {
				//memset(dLog,'\0',2500);

				//if(!ncmp_cbyc ((unsigned char *)TSB[i].soc,df->soc,4)) {
				tsb_soc = to_long_int_convertor((unsigned char *)TSB[i].soc);

				tsb_fsec[0] = TSB[i].fracsec[1];
				tsb_fsec[1] = TSB[i].fracsec[2];
				tsb_fsec[2] = TSB[i].fracsec[3];

				//	if(!ncmp_cbyc (tsb_fsec,fsec,3)) {  /* 3 bytes is actual fraction of seconds and 1 byte is Time quality   
				tsb_fracsec = to_long_int_convertor1(tsb_fsec);

				if(df_soc == tsb_soc) 
				{
					//if(!ncmp_cbyc (tsb_fsec,fsec,3)) { /* 3 bytes is actual fraction of seconds and 1 byte is Time quality  
					if(tsb_fracsec == df_fracsec) {	
						flag = 1;
						sprintf(dLog,"-Front %d rear %d Flag 1 TSB (index = %d,soc fsec %d,%d) Df (ID = %d soc fsec %d,%d)\n",front,rear,i,tsb_soc,tsb_fracsec,IDcode,df_soc,df_fracsec); 
						fprintf(f,"%s",dLog);						
						break;
					} 

				} else {

					sprintf(dLog,"-Front %d rear %d Flag 0 TSB (index = %d,soc fsec %d,%d) Df (ID = %d soc fsec %d,%d)\n",front,rear,i,tsb_soc,tsb_fracsec,IDcode,df_soc,df_fracsec); 
					fprintf(f,"%s",dLog);
					continue;

				} //if for soc ends
			}// for ends								
		}

		fclose(f);
		myfree(tsb_fsec);
		myfree(fsec);
	*/


	if(old_df_front != -1) {

			int tt = 0;
			int pp = 0;
			for(i = 0; i<OLDFRAMECOUNT; i++) {
					//	memset(dLog,'\0',2500);
				if(ODFT[i].soc != 0 ) {
					pp++;
					if (((df_soc<ODFT[i].soc) || ((df_soc == ODFT[i].soc) && df_fracsec <ODFT[i].fracsec))) {

						tt++;
					}	
				}
			}	
			
			if(tt == pp) {	

				free_dataframe_object(df);			
				myfree(tsb_fsec);
				myfree(fsec);
				unsigned char *tsb_fsec1;	
				tsb_fsec1 = malloc(3*sizeof(unsigned char));
				tsb_fsec1[0] = TSB[rear].fracsec[1];
				tsb_fsec1[1] = TSB[rear].fracsec[2];
				tsb_fsec1[2] = TSB[rear].fracsec[3];
				unsigned int tsb_fracsec1 = to_long_int_convertor1(tsb_fsec1);	
				unsigned int tsb_soc1 = to_long_int_convertor((unsigned char *)TSB[rear].soc);						
	//			printf("LOssId = %u df soc %u fsec =%u front tsb_soc %u tsb_fsec %u rear soc %u fsec %u \n",IDcode,df_soc,df_fracsec,tsb_soc,tsb_fracsec,tsb_soc1,tsb_fracsec1);	
				writeTimeToLog(88,IDcode,df_soc,df_fracsec); 			
				return;	
			}
		}	
